// Code generated by MockGen. DO NOT EDIT.
// Source: storage/base.go

// Package storage_mock is a generated GoMock package.
package storage_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockStorage) Connect(connectionString, dbName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect", connectionString, dbName)
}

// Connect indicates an expected call of Connect.
func (mr *MockStorageMockRecorder) Connect(connectionString, dbName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockStorage)(nil).Connect), connectionString, dbName)
}

// CreateOneRecord mocks base method.
func (m *MockStorage) CreateOneRecord(model interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOneRecord", model)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOneRecord indicates an expected call of CreateOneRecord.
func (mr *MockStorageMockRecorder) CreateOneRecord(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOneRecord", reflect.TypeOf((*MockStorage)(nil).CreateOneRecord), model)
}

// GetConnection mocks base method.
func (m *MockStorage) GetConnection() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetConnection")
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockStorageMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockStorage)(nil).GetConnection))
}

// Migrate mocks base method.
func (m *MockStorage) Migrate(models []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", models)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockStorageMockRecorder) Migrate(models interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockStorage)(nil).Migrate), models)
}

// SelectOneFromDb mocks base method.
func (m *MockStorage) SelectOneFromDb(receiver interface{}, query map[string]interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOneFromDb", receiver, query)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOneFromDb indicates an expected call of SelectOneFromDb.
func (mr *MockStorageMockRecorder) SelectOneFromDb(receiver, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOneFromDb", reflect.TypeOf((*MockStorage)(nil).SelectOneFromDb), receiver, query)
}
